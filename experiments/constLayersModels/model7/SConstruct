#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Python3)
# 
# Purpose: CRE stacking for a constant velocity layers model.
# 
# Site: https://www.geofisicando.com
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 31/01/2022
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

__author__="Rodolfo Dirack <rodolfo_profissional@hotmail.com>"
__version__="1.0"
__site__="https://www.geofisicando.com"

Help('''
    CRE stacking for a constant velocity layers model
    =================================================

    Author: %s
    Version: %s
    Site: %s
    ''' % (__author__,__version__,__site__))

# Madagascar Package
from rsf.proj import *

# Madagascar Recipes
from rsf.recipes.creGatherStack import modeling
from rsf.recipes.creGatherStack import interpolation
from rsf.recipes.creGatherStack import vfsa
from rsf.recipes.creGatherStack import stack
from rsf.recipes.utils import arr2str
from rsf.recipes.utils import velplot
from rsf.recipes.utils import plotStackedSection

# Main Files
trueModel='trueModel'
stackedSection='stackedSection'
parametersCube='parametersCube'
dataCube='multiLayerDataCube'
interpolatedDataCube='interpolatedDataCube2'

# Establish building dependencies
Depends('interpolatedDataCube.rsf','multiLayerDataCube.rsf')
Depends('interpolatedDataCube2.rsf','interpolatedDataCube.rsf')
Depends('crsParameters-m0-0-t0-0.rsf','interpolatedDataCube2.rsf')

Help('''
### Kirchhoff Modeling ###

Generate the multi layers velocity model and plot
Use Kirchhoff modeling to build seismic data from this model
''')

# Velocity model parameters
xmax = 6.0
zmax = 4.0
layers = ((0.4,0.45,0.46,0.47,0.48,0.5,0.8,0.85,0.85,0.85,0.6,1.0,1.0,0.4,0.4,0.7,0.8,0.7,0.6,0.5,0.4,0.4),
	(0.95,0.95,0.95,0.95,1.35,1.4,1.3,1.0,1.2,1.4,1.3,1.4,1.5,1.3,1.2,1.1,1.2,1.2,1.3,1.3,1.3,1.3),
	(1.7,1.7,1.7,1.7,1.7,1.8,1.8,1.9,1.9,1.8,1.6,1.8,2.0,1.9,1.7,1.8,1.8,1.7,2.0,2.0,2.0,1.8),
	(2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5))

velocities = (1.508,1.690,1.750,1.85,2.0)

# Generate velocity model and seismic data cube
nt=1001
dt=0.004
nm=241
dm=0.025
nh=161
dh=0.025

modeling(trueModel,
        dataCube,
        xmax,
        zmax,
        layers,
        velocities,
        nt,
        dt,
        nm,
        dm,
        nh,
        dh)

Result(trueModel,velplot("Model 7"))

Help('''
### PEF interpolation ###

PEF interpolation to increase CMP sampling for CRE stacking
You can use default values for PEF coefficients and PEF Smooth radius
or pass it through command line

PEF interpolation is done twice
''')

# PEF interpolation coefficients and smooth radius
a1=int(ARGUMENTS.get('a1',10))
a2=int(ARGUMENTS.get('a2',2))
rect1=int(ARGUMENTS.get('rect1',50))
rect2=int(ARGUMENTS.get('rect2',2))

# Number of offsets to interpolate
nhi=int(ARGUMENTS.get('nhi',nh))

interpolation(dataCube,
        'interpolatedDataCube',
        interpolatedDataCube,
        nm,
        dm,
        nt,
        dt,
        nhi,
        a1,
        a2,
        rect1,
        rect2)

Help('''
### Very Fast Simulated Annealing (VFSA) ####

Use Very Fast Simulated Annealing global optimization to get zero offset CRS parameters
(RN, RNIP and BETA) from interpolated data cube. These parameters are used to obtain CRE
gathers and CRE traveltime curves to CRE stacking
''')


# VFSA Parameters
v0 = float(ARGUMENTS.get('v0',1.5))
ot0 = float(ARGUMENTS.get('ot0',1.0))
dt0 = float(ARGUMENTS.get('dt0',0.008))
nt0 = int(ARGUMENTS.get('nt0',251))
om0 = float(ARGUMENTS.get('om0',1.5))
dm0 = float(ARGUMENTS.get('dm0',0.025))
nm0 = int(ARGUMENTS.get('nm0',121))
aperture = int(ARGUMENTS.get('aperture',25))
repeat = int(ARGUMENTS.get('repeat',4))
itmax = int(ARGUMENTS.get('itmax',500))
cds = bool(ARGUMENTS.get('cds',False))

# VFSA global optimization CRS parameters
vfsa(parametersCube,
        interpolatedDataCube,
        nm0,
        om0,
        dm0,
        nt0,
        ot0,
        dt0,
        v0,
        repeat,
        itmax,
        rnmin=2,
        rnmax=10,
        rnipmin=0.3,
        rnipmax=3.0,
        betamin=-1.0,
        betamax=1.0,
        half='y',
        verb='y')

# CRS parameters smoothing
Flow('parametersCube2',parametersCube,
	'''
	parsmoother rect1=5 rect2=5 smin=0. f=1. dbeta=0.5
	''')

Help('''
### CRE Stacking ###

Generate CRE trajectories, traveltime curves and stack
''')

# Use smoothed parameters
parametersCube='parametersCube2'

stack(stackedSection,
        interpolatedDataCube,
        parametersCube,
        nm0,
        om0,
        dm0,
        nt0,
        ot0,
        dt0,
        v0,
        aperture)

Result(stackedSection,plotStackedSection("Stacked Section"))

End()
