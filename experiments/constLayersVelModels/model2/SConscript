#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct  (Madagascar Script)
#
# Purpose: Kirchhoff Newton modeling of a multi layer velocity model.
#
# Site: https://dirack.github.io
#
# Programer: Rodolfo A. C. Neves (Dirack) 04/08/2021
#
# Email: rodolfo_profissional@hotmail.com
#
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

# Madagascar package
from rsf.proj import *

# Recipes
from rsf.recipes.pefInterpolation import pefInterpolation as pef
from rsf.recipes.kimodel import multiLayerModel as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod

# Establish building dependencies
Depends('interpolatedDataCube.rsf','multiLayerDataCube.rsf')
Depends('interpolatedDataCube2.rsf','interpolatedDataCube.rsf')
Depends('crsParameters-m0-0-t0-0.rsf','interpolatedDataCube2.rsf')

xmax = 6.0
zmax = 4.0

layers = ((1.00,1.20,0.90,1.00),
	  (2.00,1.85,1.95,1.90))

velocities = (1.508,
	      1.690,
	      2.0)

# Generate multi layer model and data cube
mlmod(interfaces='interfaces',
	dipsfile='interfacesDip',
	modelfile='model',
	xmax=xmax,
	zmax=zmax,
	layers=layers,
	velocities=velocities)

# plot the model
Plot('model','grey color=j scalebar=y label1=Depth unit1=km label2=Position unit2=km barlabel=Velocity barunit=km/s barreverse=y bias=1.0 title="Velocity Model" allpos=y')

# Generate a modeled data cube
nt=1001
dt=0.004
nm=241
dm=0.025
nh=161
dh=0.025

kinewmod(reflectors='interfaces',
	reflectorsDip='interfacesDip',
	filename='multiLayerDataCube',
	velocities=velocities,
	nt=nt,
	dt=dt,
	ns=nm,
	ds=dm,
	nh=nh,
	dh=dh)

Flow('noiseDataCube','multiLayerDataCube','noise seed=2011 range=0.01')

# Use default value or pass through command line
# PEF coeficients and PEF Smooth radius
a1=int(ARGUMENTS.get('a1',10))
a2=int(ARGUMENTS.get('a2',2))
rect1=int(ARGUMENTS.get('rect1',50))
rect2=int(ARGUMENTS.get('rect2',2))

# Number of offsets to interpolate
nhi=int(ARGUMENTS.get('nhi',1))

pef(dataCube='noiseDataCube',
    interpolated='interpolatedDataCube',
    nm=nm,
    dm=dm,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

# Do the PEF interpolation one more time
# to increase the CMP sampling
pef('interpolatedDataCube',
    'interpolatedDataCube2',
    nm=2*nm,
    dm=dm/2.0,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

End()
